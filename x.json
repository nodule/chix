{
  "name": "chix",
  "description": "Chiχ for Chiχ",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/chix.git"
  },
  "dependencies": {
    "chix-flow": "0.x.x",
    "chix-flow-todot": "0.x.x",
    "chix-loader": "0.x.x",
    "chix-runtime": "^0.1.0",
    "fbpx": "^1.1.10"
  },
  "nodes": [
    {
      "dependencies": {
        "npm": {
          "chix-flow": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "actor": {
            "title": "Actor",
            "type": "Actor",
            "default": null
          },
          "loader": {
            "title": "Loader",
            "type": "Loader",
            "default": null
          },
          "io": {
            "title": "IO Handler",
            "type": "IOMapHandler",
            "default": null
          },
          "pm": {
            "title": "Process Manager",
            "type": "ProcessManager",
            "default": null
          },
          "flow": {
            "title": "Flow JSON",
            "type": "object"
          },
          "defs": {
            "title": "Node Definitions",
            "type": "any"
          },
          "iips": {
            "title": "IIPs",
            "type": "object",
            "default": null
          }
        },
        "output": {
          "actor": {
            "title": "Actor",
            "type": "Actor"
          },
          "addNode": {
            "title": "Node added",
            "type": "xNode"
          },
          "removeNode": {
            "title": "Node removed",
            "type": "xNode"
          },
          "addLink": {
            "title": "Link added",
            "type": "xLink"
          },
          "removeLink": {
            "title": "Link removed",
            "type": "xLink"
          },
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Starting Actor"
      },
      "description": "Chix Actor",
      "title": "Actor",
      "ns": "chix",
      "name": "actor",
      "fn": "output = function (cb) {\n\n  var actor = input.actor || new chix_flow.Actor();\n\n  if (input.loader) {\n    actor.addLoader(input.loader);\n  }\n\n  if (input.pm) {\n    actor.addProcessManager(input.pm);\n  }\n\n  if (input.io) {\n    actor.addIoHandler(input.io);\n  }\n\n  actor.on('inputRequired', function (data) {\n    cb({\n      error: data\n    });\n  });\n\n  actor.on('error', function (data) {\n    cb({\n      error: data\n    });\n  });\n\n  actor.on('addNode', function (event) {\n    cb({\n      addNode: event.node\n    });\n  });\n\n  actor.on('removeNode', function (event) {\n    cb({\n      removeNode: event.node\n    });\n  });\n\n  actor.on('addLink', function (link) {\n    cb({\n      addLink: link\n    });\n  });\n\n  actor.on('removeLink', function (link) {\n    cb({\n      removeLink: link\n    });\n  });\n\n  actor.ioHandler.on('connect', function (link) {\n    cb({\n      connectLink: link\n    });\n  });\n\n  actor.ioHandler.on('disconnect', function (link) {\n    cb({\n      disconnectLink: link\n    });\n  });\n\n  // not really useful I guess\n  /*\n  actor.ioHandler.on('data', function (link) {\n    cb({\n      disconnectLink: link\n    });\n  });\n  */\n\n  actor.addMap(input.flow);\n\n  // is done by loader now.\n  // actor.addNodeDefinitions(input.defs);\n  actor.run();\n\n  if (input.iips) {\n    actor.sendIIPs(input.iips);\n    actor.push();\n  }\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "options": {
            "title": "Options",
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "noflo-runtime"
              },
              "host": {
                "type": "string",
                "default": "localhost"
              },
              "port": {
                "type": "number",
                "default": 9000
              }
            }
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "chix-runtime/lib/runtime": "0.x.x",
          "chix-runtime/lib/transport/websocketBrowser": "0.x.x"
        }
      },
      "phrases": {
        "active": "Creating FBP Websocket Client"
      },
      "description": "CSS",
      "title": "FBP Protocol Websocket Client",
      "ns": "chix",
      "name": "client",
      "fn": "// protocol is emitted on receive\n// connected, disconnected is emitted.\noutput = function() {\n  var transport = new websocketbrowser(input.options);\n  transport.on('send', function(payload) {\n    output({out: payload});\n  });\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "fbpx/chix": "latest"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "FBP Content",
            "type": "string"
          }
        },
        "output": {
          "out": {
            "title": "Flow JSON",
            "type": "object"
          },
          "iips": {
            "title": "IIPs",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Parsing .fbp"
      },
      "description": "FBP Parser",
      "title": "FBPx",
      "ns": "chix",
      "name": "fbpx",
      "fn": "output = function() {\n  var p = new chix();\n\n  cb({\n    out: p.parse(input.in)\n  });\n\n  var iips = p.getIIPs();\n\n  if(iips) {\n    cb({iips: iips});\n  }\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "chix-loader/remote": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "flow": {
            "title": "Flow JSON",
            "type": "object"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Results",
            "type": "object",
            "properties": {
              "requires": {
                "type": "object",
                "title": "Requires",
                "description": "The requires needed for this flow and it's subflows"
              },
              "nodeDefinitions": {
                "type": "object",
                "title": "Node Definitions",
                "description": "The Node Definitions in use by this flow and it's subflows"
              }
            }
          }
        }
      },
      "phrases": {
        "active": "Loading Remote Definitions"
      },
      "description": "A remote Node Definition loader for the Actor",
      "title": "Remote Loader",
      "ns": "chix",
      "name": "loaderRemote",
      "fn": "output = function() {\n  var lr = new remote();\n  lr.load(input.flow, function(err, results) {\n    if(err) {\n      output({error: err});\n    } else {\n      output({out: results});\n    }\n    done();\n  });\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "chix-flow-todot": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Flow JSON",
            "type": "object"
          }
        },
        "output": {
          "out": {
            "title": "Dot Output",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Converting to dot"
      },
      "description": "Converts a JSON Flow to Dot format",
      "title": "Convert JSON Flow to Dot",
      "ns": "chix",
      "name": "toDot",
      "fn": "on.input.in = function() {\n  output({out: chix_flow_todot(input.in)});\n};\n"
    }
  ],
  "twigs": []
}
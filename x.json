{
  "name": "chix",
  "description": "Chiχ for Chiχ",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/chix.git"
  },
  "dependencies": {
    "chix-flow": "psichi/chix-flow",
    "fbpx": "psichi/fbpx",
    "chix-loader-remote": "psichi/chix-loader-remote",
    "fbpx-chix": "psichi/fbpx-chix"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "flow": {
            "title": "Flow JSON",
            "type": "object"
          },
          "defs": {
            "title": "Node Definitions",
            "type": "any"
          },
          "iips": {
            "title": "IIPs",
            "type": "object",
            "default": null
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "require": {
        "chix-flow": "psichi/chix-flow"
      },
      "phrases": {
        "active": "Starting Actor"
      },
      "description": "Chix Actor",
      "title": "Actor",
      "ns": "chix",
      "name": "actor",
      "fn": "output = function (cb) {\n\n  var actor = new chix_flow.Actor();\n\n  actor.on('inputRequired', function (data) {\n    cb({\n      error: data\n    });\n  });\n\n  actor.on('error', function (data) {\n    cb({\n      error: data\n    });\n  });\n\n  actor.addMap(input.flow);\n  actor.addNodeDefinitions(input.defs);\n  actor.createNodes();\n  actor.run();\n\n  if (input.iips) {\n    actor.sendIIPs(input.iips);\n  }\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "FBP Content",
            "type": "string"
          }
        },
        "output": {
          "out": {
            "title": "Flow JSON",
            "type": "object"
          },
          "iips": {
            "title": "IIPs",
            "type": "any"
          }
        }
      },
      "require": {
        "fbpx": "psichi/fbpx",
        "fbpx-chix": "psichi/fbpx-chix"
      },
      "phrases": {
        "active": "Parsing .fbp"
      },
      "description": "FBP Parser",
      "title": "FBPx",
      "ns": "chix",
      "name": "fbpx",
      "fn": "var p = new fbpx();\nvar renderer = new fbpx_chix();\np.addRenderer(renderer);\n\noutput.out = p.parse(input.in);\n\nvar iips = renderer.getIIPs();\n\nif(iips) {\n  output.iips = iips;\n}\n"
    },
    {
      "ports": {
        "input": {
          "flow": {
            "title": "Flow JSON",
            "type": "object"
          }
        },
        "output": {
          "out": {
            "title": "Node Definitions",
            "type": "object"
          }
        }
      },
      "require": {
        "chix-loader-remote": "psichi/chix-loader-remote"
      },
      "phrases": {
        "active": "Loading Remote Definitions"
      },
      "description": "A remote Node Definition loader for the Actor",
      "title": "Remote Loader",
      "ns": "chix",
      "name": "loaderRemote",
      "fn": "var lr = new chix_loader_remote();\noutput = [lr, 'load', input.flow];\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Flow JSON",
            "type": "object"
          }
        },
        "output": {
          "out": {
            "title": "Dot Output",
            "type": "object"
          }
        }
      },
      "require": {
        "chix-flow": "psichi/chix-flow"
      },
      "phrases": {
        "active": "Converting to dot"
      },
      "description": "Converts a JSON Flow to Dot format",
      "title": "Convert JSON Flow to Dot",
      "ns": "chix",
      "name": "toDot",
      "fn": "function writeLine(link, graph, map, titles) {\n\n  var source_name = link.source,\n    target_name = link.target;\n\n  graph.push([\n    '  ',\n    source_name,\n    ' -> ',\n    target_name,\n    ' [label=\"out:',\n    link.out,\n    '|in:',\n    link.in,\n    '\"];'\n  ].join(''));\n\n  titles[source_name] = [\n    '  ',\n    source_name,\n    ' ',\n    '[label=\"',\n    source_name.replace('_', ':'),\n    '\"];'\n  ].join('');\n\n  titles[target_name] = [\n    '  ',\n    target_name,\n    ' ',\n    '[label=\"',\n    target_name.replace('_', ':'),\n    '\"];'\n  ].join('');\n\n}\n\nfunction toDot(map) {\n\n  var graph = [], key, titles = {}, i;\n\n  graph.push('digraph {');\n  graph.push('  label=\"' + map.description + '\";');\n  for(i = 0; i < map.links.length; i++) {\n    writeLine(\n      map.links[i],\n      graph,\n      map,\n      titles\n    );\n  }\n\n  for (key in titles) {\n    if(titles.hasOwnProperty(key)) {\n      graph.push(titles[key]);\n    }\n  }\n\n  graph.push('}');\n\n  return graph.join('\\n');\n}\n\noutput.out = toDot(input.in)\n"
    }
  ],
  "twigs": []
}